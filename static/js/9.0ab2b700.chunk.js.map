{"version":3,"sources":["components/Contact/EmailLink.js","pages/Contact.js"],"names":["validateText","text","test","length","messages","EmailLink","t","useTranslation","useState","idx","updateIter","message","updateMessage","char","updateChar","isActive","setIsActive","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","newIdx","newChar","slice","className","style","color","onMouseEnter","onMouseLeave","href","Contact","Main","title","description","to","Trans","i18nKey","ContactIcons"],"mappings":"sLAIMA,EAAe,SAACC,GAIpB,MADW,mEACDC,KAAKD,IAAyB,IAAhBA,EAAKE,QAGzBC,EAAW,CACf,KACA,QACA,OACA,iDACA,sCACA,YACA,UACA,oBACA,kDACA,iBACA,qBACA,OACA,QACA,gCACA,UA8DaC,EAzCG,WAChB,IAAQC,EAAMC,YAAe,WAArBD,EAIR,EAA0BE,mBAAS,GAAnC,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAAiCF,mBAASF,EAAEF,EAASK,KAArD,mBAAOE,EAAP,KAAgBC,EAAhB,KACA,EAA2BJ,mBAASF,EAAEF,EAASK,IAAMN,QAArD,mBAAOU,EAAP,KAAaC,EAAb,KACA,EAAgCN,oBAAS,GAAzC,mBAAOO,EAAP,KAAiBC,EAAjB,KAkBA,OA5CkB,SAACC,EAAUC,GAC7B,IAAMC,EAAgBC,mBAEtBC,qBAAU,WACRF,EAAcG,QAAUL,IACvB,CAACA,IAEJI,qBAAU,WACR,GAAIH,EAAO,CACT,IAAMK,EAAKC,aAAY,WACrBL,EAAcG,YACbJ,GACH,OAAO,kBAAMO,cAAcF,IAE7B,OAAO,eACN,CAACL,IAaJQ,EAAY,WACV,IAAIC,EAASlB,EACTmB,EAAUf,EACVA,EAXO,IAWQP,EAAEF,EAASK,IAAMN,SAClCwB,GAAU,EACVC,EAAU,GAERD,IAAWvB,EAASD,OACtBa,GAAY,IAEZJ,EAAcN,EAAEF,EAASuB,IAASE,MAAM,EAAGD,IAC3ClB,EAAWiB,GACXb,EAAWc,EAAU,MAEtBb,EArBW,GAqBQ,MAGpB,qBACEe,UAAU,mBACVC,MAAO/B,EAAaW,GAAW,GAAK,CAAEqB,MAAO,OAC7CC,aAAc,kBAAMjB,GAAY,IAChCkB,aAAc,kBAAOzB,EAAML,EAASD,QAAWa,GAAY,IAJ7D,SAME,oBAAGmB,KAAMnC,EAAaW,GAAb,iBAAkCA,EAAlC,eAAyD,GAAlE,UACE,+BAAOA,IACP,qD,QCxCOyB,UAnCC,WACd,IAAQ9B,EAAMC,YAAe,WAArBD,EACR,OACE,cAAC+B,EAAA,EAAD,CACEC,MAAOhC,EAAE,WACTiC,YAAajC,EAAE,0DAFjB,SAIE,0BAASwB,UAAU,OAAOP,GAAG,UAA7B,UACE,iCACE,sBAAKO,UAAU,QAAf,UACE,oBAAI,cAAY,UAAhB,SAA0B,cAAC,IAAD,CAAMU,GAAG,WAAT,SAAqBlC,EAAE,eACjD,4BACE,eAACmC,EAAA,EAAD,CAAOC,QAAQ,WAAWpC,EAAGA,EAA7B,wCAC6B,uBAD7B,4BAE2B,uBAF3B,wCAQN,sBAAKwB,UAAU,WAAf,UACE,8BACGxB,EAAE,8BADL,KACqC,0BAErC,cAAC,EAAD,OAEF,sBAAKwB,UAAU,WAAf,UACE,8BAAIxB,EAAE,qCAAN,OACA,cAACqC,EAAA,EAAD","file":"static/js/9.0ab2b700.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { useTranslation } from 'react-i18next';\n\n// Validates the first half of an email address.\nconst validateText = (text) => {\n  // NOTE: Passes RFC 5322 but not tested on google's standard.\n  // eslint-disable-next-line no-useless-escape\n  const re = /^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))$/;\n  return re.test(text) || text.length === 0;\n};\n\nconst messages = [\n  'hi',\n  'hello',\n  'hola',\n  'you-can-email-me-at-literally-anything! Really',\n  'well, not anything. But most things',\n  'like-this',\n  'or-this',\n  'but not this :(  ',\n  'you.can.also.email.me.with.specific.topics.like',\n  'just-saying-hi',\n  'please-work-for-us',\n  'help',\n  'admin',\n  'or-I-really-like-your-website',\n  'thanks',\n];\n\nconst useInterval = (callback, delay) => {\n  const savedCallback = useRef();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    if (delay) {\n      const id = setInterval(() => {\n        savedCallback.current();\n      }, delay);\n      return () => clearInterval(id);\n    }\n    return () => {}; // pass linter\n  }, [delay]);\n};\n\nconst EmailLink = () => {\n  const { t } = useTranslation('contact');\n  const hold = 50; // ticks to wait after message is complete before rendering next message\n  const delay = 50; // tick length in mS\n\n  const [idx, updateIter] = useState(0); // points to current message\n  const [message, updateMessage] = useState(t(messages[idx]));\n  const [char, updateChar] = useState(t(messages[idx]).length); // points to current char\n  const [isActive, setIsActive] = useState(true); // disable when all messages are printed\n\n  useInterval(() => {\n    let newIdx = idx;\n    let newChar = char;\n    if (char - hold >= t(messages[idx]).length) {\n      newIdx += 1;\n      newChar = 0;\n    }\n    if (newIdx === messages.length) {\n      setIsActive(false);\n    } else {\n      updateMessage(t(messages[newIdx]).slice(0, newChar));\n      updateIter(newIdx);\n      updateChar(newChar + 1);\n    }\n  }, isActive ? delay : null);\n\n  return (\n    <div\n      className=\"inline-container\"\n      style={validateText(message) ? {} : { color: 'red' }}\n      onMouseEnter={() => setIsActive(false)}\n      onMouseLeave={() => (idx < messages.length) && setIsActive(true)}\n    >\n      <a href={validateText(message) ? `mailto:${message}@otahirs.cz` : ''}>\n        <span>{message}</span>\n        <span>@otahirs.cz</span>\n      </a>\n    </div>\n  );\n};\n\nexport default EmailLink;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { useTranslation, Trans } from 'react-i18next';\nimport Main from '../layouts/Main';\nimport EmailLink from '../components/Contact/EmailLink';\nimport ContactIcons from '../components/Contact/ContactIcons';\n\nconst Contact = () => {\n  const { t } = useTranslation('contact');\n  return (\n    <Main\n      title={t('Contact')}\n      description={t('Contact Otakar HirÅ¡ via email @ conact@otahirs.cz')}\n    >\n      <article className=\"post\" id=\"contact\">\n        <header>\n          <div className=\"title\">\n            <h2 data-testid=\"heading\"><Link to=\"/contact\">{t('Contact')}</Link></h2>\n            <p>\n              <Trans i18nKey=\"SUBTITLE\" t={t}>\n                Do you want to say thanks? <br />\n                Do I owe you an apology? <br />\n                Is there a meaning in life?\n              </Trans>\n            </p>\n          </div>\n        </header>\n        <div className=\"email-at\">\n          <p>\n            {t('You can either email me at')}: <br />\n          </p>\n          <EmailLink />\n        </div>\n        <div className=\"email-at\">\n          <p>{t('or reach me on facebook/instagram')}:</p>\n          <ContactIcons />\n        </div>\n      </article>\n    </Main>\n  );\n};\n\nexport default Contact;\n"],"sourceRoot":""}